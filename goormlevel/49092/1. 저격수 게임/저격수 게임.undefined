import java.io.*;
import java.util.*;

class Main {
    static class Enemy {
        int x, y;
        Enemy(int x, int y) { this.x = x; this.y = y; }
    }

    static boolean canCover(List<Enemy> enemies, int a, int b) {
        for (Enemy e : enemies) {
            if (!(e.x == a || e.y == a || e.x == b || e.y == b))
                return false;
        }
        return true;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        List<Enemy> enemies = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            String[] s = br.readLine().split(" ");
            enemies.add(new Enemy(Integer.parseInt(s[0]), Integer.parseInt(s[1])));
        }

        if (N <= 2) {
            System.out.println("YES");
            return;
        }

        Enemy e1 = enemies.get(0);
        Set<Integer> candidates = new HashSet<>();

        candidates.add(e1.x);
        candidates.add(e1.y);

        for (int i = 1; i < Math.min(4, N); i++) {
            Enemy e = enemies.get(i);
            candidates.add(e.x);
            candidates.add(e.y);
        }

        List<Integer> list = new ArrayList<>(candidates);
        for (int i = 0; i < list.size(); i++) {
            for (int j = i; j < list.size(); j++) {
                if (canCover(enemies, list.get(i), list.get(j))) {
                    System.out.println("YES");
                    return;
                }
            }
        }

        System.out.println("NO");
    }
}
